// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.24.4
// source: calculator.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "calculator";

export interface SumRequest {
  a: number;
  b: number;
}

export interface SumResponse {
  sum: number;
}

export const CALCULATOR_PACKAGE_NAME = "calculator";

export interface CalculatorServiceClient {
  sum(request: SumRequest, metadata: Metadata, ...rest: any): Observable<SumResponse>;
}

export interface CalculatorServiceController {
  sum(
    request: SumRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<SumResponse> | Observable<SumResponse> | SumResponse;
}

export function CalculatorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sum"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CalculatorService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CalculatorService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CALCULATOR_SERVICE_NAME = "CalculatorService";
